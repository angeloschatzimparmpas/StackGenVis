"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
/** Texture data binding */
var TextureBinding = /** @class */ (function () {
    function TextureBinding() {
    }
    return TextureBinding;
}());
exports.TextureBinding = TextureBinding;
var ArrayBinding = /** @class */ (function (_super) {
    __extends(ArrayBinding, _super);
    function ArrayBinding() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._data = null;
        _this._valueFunction = null;
        _this._dirty = false;
        _this._textureData = null;
        return _this;
    }
    ArrayBinding.prototype.getTextureData = function () {
        if (this._dirty) {
            var values = this._data.map(this._valueFunction).map(types_1.getBindingValue);
            if (values.length == 0) {
                this._textureData = null;
            }
            else {
                var array_1;
                var numberComponents = void 0;
                if (typeof values[0] == "number") {
                    numberComponents = 1;
                    array_1 = new Float32Array(values.length * 4);
                    for (var i = 0; i < values.length; i++) {
                        array_1[i * 4] = values[i];
                    }
                }
                else {
                    numberComponents = values[0].length;
                    array_1 = new Float32Array(values.length * 4);
                    var offset = 0;
                    for (var i = 0; i < values.length; i++) {
                        var v = values[i];
                        for (var j = 0; j < numberComponents; j++) {
                            array_1[offset++] = v[j];
                        }
                        offset += 4 - numberComponents;
                    }
                }
                this._textureData = {
                    width: this._data.length,
                    height: 1,
                    dimensions: 1,
                    type: "f32",
                    numberComponents: numberComponents,
                    data: array_1
                };
            }
        }
        return this._textureData;
    };
    ArrayBinding.prototype.data = function (data) {
        if (data != null) {
            this._data = data;
            this._dirty = true;
            return this;
        }
        else {
            return this._data;
        }
    };
    ArrayBinding.prototype.value = function (func) {
        if (func != null) {
            this._valueFunction = func;
            this._dirty = true;
            return this;
        }
        else {
            return this._valueFunction;
        }
    };
    return ArrayBinding;
}(TextureBinding));
exports.ArrayBinding = ArrayBinding;
var Image = /** @class */ (function (_super) {
    __extends(Image, _super);
    function Image() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._data = null;
        return _this;
    }
    Image.prototype.setImage = function (image) {
        this._data = {
            width: image.width,
            height: image.height,
            numberComponents: 4,
            type: image instanceof HTMLImageElement
                ? "HTMLImageElement"
                : "HTMLCanvasElement",
            data: image,
            dimensions: 2
        };
    };
    Image.prototype.getTextureData = function () {
        return this._data;
    };
    return Image;
}(TextureBinding));
exports.Image = Image;
function array() {
    return new ArrayBinding();
}
exports.array = array;
//# sourceMappingURL=array.js.map