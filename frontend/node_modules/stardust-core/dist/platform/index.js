"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var PlatformMarkData = /** @class */ (function () {
    function PlatformMarkData() {
    }
    return PlatformMarkData;
}());
exports.PlatformMarkData = PlatformMarkData;
var PlatformMark = /** @class */ (function () {
    function PlatformMark() {
    }
    return PlatformMark;
}());
exports.PlatformMark = PlatformMark;
var Viewport = /** @class */ (function () {
    function Viewport() {
    }
    return Viewport;
}());
exports.Viewport = Viewport;
var Viewport2D = /** @class */ (function (_super) {
    __extends(Viewport2D, _super);
    function Viewport2D(width, height) {
        var _this = _super.call(this) || this;
        _this.width = width;
        _this.height = height;
        return _this;
    }
    return Viewport2D;
}(Viewport));
exports.Viewport2D = Viewport2D;
var Viewport3D = /** @class */ (function (_super) {
    __extends(Viewport3D, _super);
    function Viewport3D(width, height, fov) {
        var _this = _super.call(this) || this;
        _this.width = width;
        _this.height = height;
        _this.fov = fov;
        return _this;
    }
    return Viewport3D;
}(Viewport));
exports.Viewport3D = Viewport3D;
var platformConstructors = new common_1.Dictionary();
var Platform = /** @class */ (function () {
    function Platform() {
    }
    /** Register a platform */
    Platform.Register = function (name, ctor) {
        platformConstructors.set(name, ctor);
    };
    /** Create a platform */
    Platform.Create = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return platformConstructors.get(name).apply(void 0, args);
    };
    return Platform;
}());
exports.Platform = Platform;
function platform(name) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return Platform.Create.apply(Platform, [name].concat(args));
}
exports.platform = platform;
//# sourceMappingURL=index.js.map