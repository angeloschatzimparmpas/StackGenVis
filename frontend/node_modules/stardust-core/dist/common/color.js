"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var math_1 = require("./math");
/** Color class. Stardust use colors with range 0-1 instead of 0-255, different from HTML! */
var Color = /** @class */ (function (_super) {
    __extends(Color, _super);
    /** Create a new Color, rgba ranges are 0 to 1 */
    function Color(r, g, b, a) {
        if (r === void 0) { r = 0; }
        if (g === void 0) { g = 0; }
        if (b === void 0) { b = 0; }
        if (a === void 0) { a = 1; }
        var _this = _super.call(this) || this;
        _this.r = r;
        _this.g = g;
        _this.b = b;
        _this.a = a;
        return _this;
    }
    /** Create a color from an array of numbers [r, g, b, a] */
    Color.FromArray = function (_a) {
        var r = _a[0], g = _a[1], b = _a[2], a = _a[3];
        return new Color(r, g, b, a);
    };
    /** Create a color from HTML color code rgb(r, g, b), rgba(r, g, b, a), #RRGGBB, #RGB */
    Color.FromHTML = function (html, alpha) {
        if (alpha === void 0) { alpha = 1; }
        return Color.FromArray(colorFromHTML(html, alpha));
    };
    Color.prototype.toArray = function () {
        return [this.r, this.g, this.b, this.a];
    };
    Color.prototype.clone = function () {
        return new Color(this.r, this.g, this.b, this.a);
    };
    return Color;
}(math_1.MathType));
exports.Color = Color;
/** Get color quadruple from HTML color code */
function colorFromHTML(html, alpha) {
    if (html === void 0) { html = "#000000"; }
    if (alpha === void 0) { alpha = 1; }
    var m;
    m = html.match(/^ *rgb *\( *([0-9\.\-e]+) *, *([0-9\.\-e]+) *, *([0-9\.\-e]+) *\) *$/);
    if (m) {
        return [+m[1] / 255.0, +m[2] / 255.0, +m[3] / 255.0, alpha];
    }
    m = html.match(/^ *rgba *\( *([0-9\.\-e]+) *, *([0-9\.\-e]+) *, *([0-9\.\-e]+) *, *([0-9\.\-e]+) *\) *$/);
    if (m) {
        return [+m[1] / 255.0, +m[2] / 255.0, +m[3] / 255.0, alpha * +m[4]];
    }
    m = html.match(/^ *\#([0-9a-fA-F]{3}) *$/);
    if (m) {
        var r = parseInt(m[1][0], 16) * 17;
        var g = parseInt(m[1][1], 16) * 17;
        var b = parseInt(m[1][2], 16) * 17;
        return [r / 255.0, g / 255.0, b / 255.0, alpha];
    }
    m = html.match(/^ *\#([0-9a-fA-F]{6}) *$/);
    if (m) {
        var r = parseInt(m[1].slice(0, 2), 16);
        var g = parseInt(m[1].slice(2, 4), 16);
        var b = parseInt(m[1].slice(4, 6), 16);
        return [r / 255.0, g / 255.0, b / 255.0, alpha];
    }
    return [0, 0, 0, 1];
}
exports.colorFromHTML = colorFromHTML;
//# sourceMappingURL=color.js.map