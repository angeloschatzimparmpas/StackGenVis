"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Create a text cache of given width and height.
var Font = /** @class */ (function () {
    function Font(fontFamily, fontSize, fontWeight, fontStyle) {
        if (fontFamily === void 0) { fontFamily = "Arial"; }
        if (fontSize === void 0) { fontSize = 12; }
        if (fontWeight === void 0) { fontWeight = "normal"; }
        if (fontStyle === void 0) { fontStyle = "normal"; }
        this.fontFamily = fontFamily;
        this.fontSize = fontSize;
        this.fontWeight = fontWeight;
        this.fontStyle = fontStyle;
    }
    Font.prototype.hash = function () {
        return ("F" +
            this.fontFamily +
            "," +
            this.fontSize +
            "," +
            this.fontWeight +
            "," +
            this.fontStyle);
    };
    Font.prototype.setFont = function (c) {
        c.font = this.fontStyle + " " + this.fontWeight + " " + this.fontSize + "px " + JSON.stringify(this.fontFamily);
    };
    return Font;
}());
exports.Font = Font;
var TextCache = /** @class */ (function () {
    function TextCache(width, height, scaling) {
        if (width === void 0) { width = 1024; }
        if (height === void 0) { height = 1024; }
        if (scaling === void 0) { scaling = 2; }
        this.entries = {};
        this.current_x = 0;
        this.current_y = 0;
        this.current_height = 0;
        this.width = width;
        this.height = height;
        this.canvas = document.createElement("canvas");
        this.context = this.canvas.getContext("2d");
        this.canvas.width = this.width * scaling;
        this.canvas.height = this.height * scaling;
        this.scaling = scaling;
        this.context.scale(scaling, scaling);
        this.context.fillStyle = "#000000";
    }
    // Add text of a given font to the cache.
    TextCache.prototype.addText = function (text, font) {
        var hash = JSON.stringify(text) + font.hash();
        if (this.entries[hash]) {
            return this._layout2TextRect(this.entries[hash]);
        }
        font.setFont(this.context);
        var width = this.context.measureText(text).width;
        var height = font.fontSize;
        var bbox_width = Math.ceil(width + 4);
        var bbox_height = Math.ceil(height + 2);
        var x_offset = 2;
        var baseline_offset = height - 2;
        if (bbox_width > this.width) {
            throw new Error("E_FIT");
        }
        // If can't fit in current line, start a new line.
        if (this.current_x + bbox_width > this.width) {
            if (this.current_y + this.current_height + bbox_height > this.height) {
                throw new Error("E_FIT");
            }
            this.current_x = 0;
            this.current_y += this.current_height;
            this.current_height = bbox_height;
        }
        // Here it must fit.
        var layout = {
            x: this.current_x,
            y: this.current_y,
            x_offset: x_offset,
            baseline_offset: baseline_offset,
            bbox_width: bbox_width,
            bbox_height: bbox_height
        };
        this.current_x += bbox_width;
        this.current_height = Math.max(this.current_height, bbox_height);
        this.entries[hash] = layout;
        // Render.
        var draw_x = layout.x + x_offset;
        var draw_y = layout.y + baseline_offset;
        this.context.fillText(text, draw_x, draw_y);
        this.updated = true;
        return this._layout2TextRect(layout);
    };
    TextCache.prototype._layout2TextRect = function (layout) {
        return {
            x: layout.x * this.scaling,
            y: layout.y * this.scaling,
            w: layout.bbox_width * this.scaling,
            h: layout.bbox_height * this.scaling,
            scaling: this.scaling,
            x_offset: layout.x_offset * this.scaling,
            baseline_offset: layout.baseline_offset * this.scaling
        };
    };
    // Query the cache for a text and given font.
    TextCache.prototype.getTextRect = function (text, font) {
        var hash = JSON.stringify(text) + font.hash();
        var layout = this.entries[hash];
        if (!layout) {
            return null;
        }
        return this._layout2TextRect(layout);
    };
    // Clear the cache.
    TextCache.prototype.clear = function () {
        this.entries = {};
        this.current_x = 0;
        this.current_y = 0;
        this.current_height = 0;
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.updated = true;
    };
    return TextCache;
}());
exports.TextCache = TextCache;
//# sourceMappingURL=textCache.js.map