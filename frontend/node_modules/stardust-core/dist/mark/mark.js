"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var common_2 = require("../common");
var binding_1 = require("../binding/binding");
var scale_1 = require("../scale/scale");
var shiftBindingDescriptions = [
    { shift: -2, suffix: "_pp" },
    { shift: -1, suffix: "_p" },
    { shift: +1, suffix: "_n" },
    { shift: +2, suffix: "_nn" }
];
var Mark = /** @class */ (function () {
    function Mark(spec, shader, platform) {
        this._spec = spec;
        this._shader = shader;
        this._data = [];
        this._platform = platform;
        this._bindings = new common_2.Dictionary();
        this._shiftBindings = new common_2.Dictionary();
        this._platformMark = null;
        this._shouldUploadData = true;
        this._instanceFunctions = null;
        // Set bindings to default value whenever exists.
        for (var name_1 in this._spec.input) {
            if (this._spec.input.hasOwnProperty(name_1)) {
                var input = this._spec.input[name_1];
                if (input.default != null) {
                    this._bindings.set(name_1, new binding_1.Binding(input.type, input.default));
                }
            }
        }
        // Assign shift bindings based on naming convention.
        for (var name_2 in this._spec.input) {
            if (this._spec.input.hasOwnProperty(name_2)) {
                for (var _i = 0, shiftBindingDescriptions_1 = shiftBindingDescriptions; _i < shiftBindingDescriptions_1.length; _i++) {
                    var _a = shiftBindingDescriptions_1[_i], shift = _a.shift, suffix = _a.suffix;
                    if (this._spec.input.hasOwnProperty(name_2 + suffix)) {
                        this._bindings.delete(name_2 + suffix);
                        this._shiftBindings.set(name_2 + suffix, new binding_1.ShiftBinding(name_2, shift));
                    }
                }
            }
        }
    }
    Object.defineProperty(Mark.prototype, "spec", {
        get: function () {
            return this._spec;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mark.prototype, "shader", {
        get: function () {
            return this._shader;
        },
        enumerable: true,
        configurable: true
    });
    Mark.prototype.attr = function (name, value) {
        if (value === undefined) {
            if (!this._bindings.has(name)) {
                throw new common_1.RuntimeError("attr '" + name + " is undefined.");
            }
            var binding = this._bindings.get(name);
            if (binding instanceof binding_1.Binding) {
                return binding.value;
            }
            else {
                return binding;
            }
        }
        else {
            if (!this._spec.input.hasOwnProperty(name)) {
                throw new common_1.RuntimeError("attr '" + name + " is undefined.");
            }
            if (value instanceof scale_1.ScaleBinding) {
                if (this._platformMark) {
                    if (this._bindings.get(name) != value) {
                        this._platformMark = null;
                    }
                }
                this._bindings.set(name, value);
            }
            else {
                // Create new binding.
                var newBinding = new binding_1.Binding(this._spec.input[name].type, value);
                // Decide if we should recompile the platform code.
                if (this._platformMark) {
                    // Recompile if the input was compiled as input,
                    // and the new binding is not a function.
                    if (this._platformMark.isUniform(name) &&
                        newBinding.bindingType != binding_1.BindingType.FUNCTION) {
                        if (newBinding.bindingType == binding_1.BindingType.VALUE) {
                            this._platformMark.updateUniform(name, newBinding.specValue);
                        }
                        if (newBinding.bindingType == binding_1.BindingType.TEXTURE) {
                            this._platformMark.updateTexture(name, newBinding.textureValue);
                        }
                    }
                    else {
                        this._platformMark = null;
                    }
                }
                this._bindings.set(name, newBinding);
            }
            return this;
        }
    };
    Mark.prototype.data = function (data) {
        if (data === undefined) {
            return this._data;
        }
        else {
            this._data = data;
            this._shouldUploadData = true;
            return this;
        }
    };
    Mark.prototype.instance = function (datum, attrs) {
        if (datum === undefined && attrs === undefined) {
            return this._instanceFunctions;
        }
        else {
            this._instanceFunctions = {
                datum: datum,
                attrs: attrs
            };
        }
    };
    // Make alternative spec to include ScaleBinding values.
    Mark.prototype.prepareSpecification = function () {
        var newSpec = {
            input: common_2.shallowClone(this._spec.input),
            output: this._spec.output,
            statements: this._spec.statements.slice(),
            variables: common_2.shallowClone(this._spec.variables),
            repeatBegin: this._spec.repeatBegin,
            repeatEnd: this._spec.repeatEnd
        };
        var newBindings = this._bindings.clone();
        var shiftBindings = this._shiftBindings.clone();
        this._bindings.forEach(function (binding, name) {
            if (binding instanceof scale_1.ScaleBinding) {
                var attributes = binding.getAttributes();
                var attrs_1 = {};
                attributes.forEach(function (attr) {
                    var bindedName = name + attr.bindedName;
                    newBindings.set(bindedName, new binding_1.Binding(attr.type, attr.binding));
                    attrs_1[attr.bindedName] = {
                        type: "variable",
                        valueType: attr.type,
                        variableName: bindedName
                    };
                    newSpec.input[bindedName] = {
                        type: attr.type,
                        default: null
                    };
                });
                // Move the attribute to variables.
                newSpec.variables[name] = newSpec.input[name].type;
                newSpec.statements.splice(0, 0, {
                    type: "assign",
                    variableName: name,
                    expression: binding.getExpression(attrs_1),
                    valueType: newSpec.input[name].type
                });
                var _loop_1 = function (suffix, shift) {
                    if (newSpec.input.hasOwnProperty(name + suffix)) {
                        newSpec.variables[name + suffix] = newSpec.input[name].type;
                        var shiftAttrs_1 = {};
                        attributes.forEach(function (attr) {
                            var bindedName = name + attr.bindedName;
                            if (newBindings.get(bindedName).bindingType == binding_1.BindingType.FUNCTION) {
                                var shiftBindedName = bindedName + suffix;
                                shiftBindings.set(shiftBindedName, new binding_1.ShiftBinding(bindedName, shift));
                                shiftAttrs_1[attr.bindedName] = {
                                    type: "variable",
                                    valueType: attr.type,
                                    variableName: shiftBindedName
                                };
                                newSpec.input[shiftBindedName] = {
                                    type: attr.type,
                                    default: null
                                };
                            }
                            else {
                                shiftAttrs_1[attr.bindedName] = {
                                    type: "variable",
                                    valueType: attr.type,
                                    variableName: bindedName
                                };
                            }
                        });
                        newSpec.statements.splice(0, 0, {
                            type: "assign",
                            variableName: name + suffix,
                            expression: binding.getExpression(shiftAttrs_1),
                            valueType: newSpec.input[name].type
                        });
                    }
                };
                for (var _i = 0, shiftBindingDescriptions_2 = shiftBindingDescriptions; _i < shiftBindingDescriptions_2.length; _i++) {
                    var _a = shiftBindingDescriptions_2[_i], suffix = _a.suffix, shift = _a.shift;
                    _loop_1(suffix, shift);
                }
                delete newSpec.input[name];
                newBindings.delete(name);
                for (var _b = 0, shiftBindingDescriptions_3 = shiftBindingDescriptions; _b < shiftBindingDescriptions_3.length; _b++) {
                    var suffix = shiftBindingDescriptions_3[_b].suffix;
                    if (shiftBindings.has(name + suffix)) {
                        delete newSpec.input[name + suffix];
                        shiftBindings.delete(name + suffix);
                    }
                }
            }
        });
        return [newSpec, newBindings, shiftBindings];
    };
    Mark.prototype.uploadScaleUniforms = function () {
        var _this = this;
        this._bindings.forEach(function (binding, name) {
            if (binding instanceof scale_1.ScaleBinding) {
                var attributes = binding.getAttributes();
                var attrs = {};
                attributes.forEach(function (attr) {
                    if (attr.binding instanceof binding_1.TextureBinding) {
                        _this._platformMark.updateTexture(name + attr.bindedName, attr.binding);
                    }
                    else {
                        _this._platformMark.updateUniform(name + attr.bindedName, attr.binding);
                    }
                });
            }
        });
    };
    Mark.prototype.prepare = function () {
        var _this = this;
        if (!this._platformMark) {
            var _a = this.prepareSpecification(), spec = _a[0], binding = _a[1], shiftBinding = _a[2];
            this._platformMark = this._platform.compile(this, spec, this._shader, binding, shiftBinding);
            this._shouldUploadData = true;
        }
        if (this._shouldUploadData) {
            if (this._instanceFunctions == null) {
                this._platformMarkData = this._platformMark.uploadData([this._data]);
            }
            else {
                var allData_1 = [];
                this._data.forEach(function (datum, index) {
                    var data = _this._instanceFunctions.datum(datum, index, _this._data);
                    allData_1.push(data);
                });
                this._platformMarkData = this._platformMark.uploadData(allData_1);
            }
            this._shouldUploadData = false;
        }
        return this;
    };
    Mark.prototype.render = function () {
        var _this = this;
        this.prepare();
        if (this._instanceFunctions == null) {
            this._platformMark.render(this._platformMarkData, function () {
                _this.uploadScaleUniforms();
            });
        }
        else {
            this._platformMark.render(this._platformMarkData, function (index) {
                var datum = _this._data[index];
                if (_this._instanceFunctions.attrs) {
                    var attrs = _this._instanceFunctions.attrs(datum, index, _this._data);
                    if (attrs != null) {
                        for (var attr in attrs) {
                            if (attrs.hasOwnProperty(attr)) {
                                _this._platformMark.updateUniform(attr, binding_1.getBindingValue(attrs[attr]));
                            }
                        }
                    }
                }
                _this.uploadScaleUniforms();
            });
        }
        return this;
    };
    return Mark;
}());
exports.Mark = Mark;
//# sourceMappingURL=mark.js.map