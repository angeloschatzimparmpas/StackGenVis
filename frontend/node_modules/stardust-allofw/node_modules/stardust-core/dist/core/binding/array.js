"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var types_1 = require("./types");
var TextureBinding = (function () {
    function TextureBinding() {
    }
    return TextureBinding;
}());
exports.TextureBinding = TextureBinding;
var Array = (function (_super) {
    __extends(Array, _super);
    function Array() {
        _super.apply(this, arguments);
        this._data = null;
        this._valueFunction = null;
        this._dirty = false;
        this._textureData = null;
    }
    Array.prototype.getTextureData = function () {
        if (this._dirty) {
            var values = this._data.map(this._valueFunction).map(types_1.getBindingValue);
            if (values.length == 0) {
                this._textureData = null;
            }
            else {
                var array_1;
                var numberComponents = void 0;
                if (typeof (values[0]) == "number") {
                    numberComponents = 1;
                    array_1 = new Float32Array(values.length * 4);
                    for (var i = 0; i < values.length; i++) {
                        array_1[i * 4] = values[i];
                    }
                }
                else {
                    numberComponents = values[0].length;
                    array_1 = new Float32Array(values.length * 4);
                    var offset = 0;
                    for (var i = 0; i < values.length; i++) {
                        var v = values[i];
                        for (var j = 0; j < numberComponents; j++) {
                            array_1[offset++] = v[j];
                        }
                        offset += 4 - numberComponents;
                    }
                }
                this._textureData = {
                    width: this._data.length,
                    height: 1,
                    dimensions: 1,
                    numberComponents: numberComponents,
                    data: array_1
                };
            }
        }
        return this._textureData;
    };
    Array.prototype.data = function (data) {
        if (data != null) {
            this._data = data;
            this._dirty = true;
            return this;
        }
        else {
            return this._data;
        }
    };
    Array.prototype.value = function (func) {
        if (func != null) {
            this._valueFunction = func;
            this._dirty = true;
            return this;
        }
        else {
            return this._valueFunction;
        }
    };
    return Array;
}(TextureBinding));
exports.Array = Array;
function array() {
    return new Array();
}
exports.array = array;
//# sourceMappingURL=array.js.map