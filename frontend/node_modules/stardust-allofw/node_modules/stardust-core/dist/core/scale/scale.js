"use strict";
var ScaleBinding = (function () {
    function ScaleBinding(scale, returnType, argTypes) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        this._scale = scale;
        this._returnType = returnType;
        this._argTypes = argTypes;
        this._args = args;
    }
    ScaleBinding.prototype.getReturnType = function () {
        return this._returnType;
    };
    ScaleBinding.prototype.getAttributes = function () {
        var _this = this;
        var result = [];
        for (var _i = 0, _a = this._scale.getAttributes(); _i < _a.length; _i++) {
            var attr = _a[_i];
            result.push({
                scaleBinding: this,
                bindedName: "s" + attr.name,
                name: attr.name,
                type: attr.type,
                binding: attr.binding
            });
        }
        this._args.forEach(function (arg, index) {
            if (arg instanceof ScaleBinding) {
                var a = arg;
                var attributes = a.getAttributes();
                for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
                    var attr = attributes_1[_i];
                    result.push({
                        scaleBinding: _this,
                        bindedName: "a" + index + attr.bindedName,
                        name: attr.name,
                        type: attr.type,
                        binding: attr.binding
                    });
                }
            }
            else {
                // Binded values become attributes here.
                result.push({
                    scaleBinding: _this,
                    bindedName: "a" + index,
                    name: "a" + index,
                    type: _this._argTypes[index],
                    binding: arg
                });
            }
        });
        return result;
    };
    ScaleBinding.prototype.getExpression = function (attrs) {
        var sAttrs = {};
        for (var _i = 0, _a = this._scale.getAttributes(); _i < _a.length; _i++) {
            var attr = _a[_i];
            sAttrs[attr.name] = attrs[("s" + attr.name)];
        }
        var values = this._args.map(function (arg, index) {
            if (arg instanceof ScaleBinding) {
                var a = arg;
                var attributes = a.getAttributes();
                var aAttrs = {};
                for (var _i = 0, attributes_2 = attributes; _i < attributes_2.length; _i++) {
                    var attr = attributes_2[_i];
                    aAttrs[attr.bindedName] = attrs[("a" + index + attr.bindedName)];
                }
                return arg.getExpression(aAttrs);
            }
            else {
                return attrs[("a" + index)];
            }
        });
        return (_b = this._scale).getExpression.apply(_b, [sAttrs].concat(values));
        var _b;
    };
    return ScaleBinding;
}());
exports.ScaleBinding = ScaleBinding;
//# sourceMappingURL=scale.js.map