"use strict";
// Prebuilt scales.
var utils_1 = require("../utils/utils");
var compiler_1 = require("../compiler/compiler");
var parser_1 = require("../compiler/parser");
var scale_1 = require("./scale");
var SC = require("../spec/construct");
var scale;
(function (scale_2) {
    function linear(valueType) {
        if (valueType === void 0) { valueType = "float"; }
        var scale = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new (scale_1.ScaleBinding.bind.apply(scale_1.ScaleBinding, [void 0].concat([scale, valueType, ["float"]], args)))();
        });
        var domain = [0, 1];
        var range = [0, 1];
        scale.domain = function (value) {
            if (value == null)
                return domain;
            domain[0] = value[0];
            domain[1] = value[1];
            return scale;
        };
        scale.range = function (value) {
            if (value == null)
                return range;
            range[0] = value[0];
            range[1] = value[1];
            return scale;
        };
        scale.getAttributes = function () {
            return [
                { name: "d0", type: valueType, binding: domain[0] },
                { name: "d1", type: valueType, binding: domain[1] },
                { name: "r0", type: valueType, binding: range[0] },
                { name: "r1", type: valueType, binding: range[1] }
            ];
        };
        scale.getExpression = function (attrs, value) {
            return SC.mix(attrs["r0"], attrs["r1"], SC.div(SC.sub(value, attrs["d0"]), SC.sub(attrs["d1"], attrs["d0"])));
        };
        return scale;
    }
    scale_2.linear = linear;
    function log(valueType) {
        if (valueType === void 0) { valueType = "float"; }
        var scale = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new (scale_1.ScaleBinding.bind.apply(scale_1.ScaleBinding, [void 0].concat([scale, valueType, ["float"]], args)))();
        });
        var domain = [0, 1];
        var range = [0, 1];
        scale.domain = function (value) {
            if (value == null)
                return domain;
            domain[0] = value[0];
            domain[1] = value[1];
            return scale;
        };
        scale.range = function (value) {
            if (value == null)
                return range;
            range[0] = value[0];
            range[1] = value[1];
            return scale;
        };
        scale.getAttributes = function () {
            return [
                { name: "d0", type: valueType, binding: domain[0] },
                { name: "d1", type: valueType, binding: domain[1] },
                { name: "r0", type: valueType, binding: range[0] },
                { name: "r1", type: valueType, binding: range[1] }
            ];
        };
        scale.getExpression = function (attrs, value) {
            return SC.mix(attrs["r0"], attrs["r1"], SC.div(SC.log(SC.div(value, attrs["d0"])), SC.log(SC.div(attrs["d1"], attrs["d0"]))));
        };
        return scale;
    }
    scale_2.log = log;
    // Common arithmetics
    function addScale() {
        var scale = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new (scale_1.ScaleBinding.bind.apply(scale_1.ScaleBinding, [void 0].concat([scale, "float", ["float", "float"]], args)))();
        });
        scale.getAttributes = function () { return []; };
        scale.getExpression = function (attrs, value1, value2) { return SC.add(value1, value2); };
        return scale;
    }
    scale_2.addScale = addScale;
    function subScale() {
        var scale = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new (scale_1.ScaleBinding.bind.apply(scale_1.ScaleBinding, [void 0].concat([scale, "float", ["float", "float"]], args)))();
        });
        scale.getAttributes = function () { return []; };
        scale.getExpression = function (attrs, value1, value2) { return SC.sub(value1, value2); };
        return scale;
    }
    scale_2.subScale = subScale;
    function mulScale() {
        var scale = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new (scale_1.ScaleBinding.bind.apply(scale_1.ScaleBinding, [void 0].concat([scale, "float", ["float", "float"]], args)))();
        });
        scale.getAttributes = function () { return []; };
        scale.getExpression = function (attrs, value1, value2) { return SC.mul(value1, value2); };
        return scale;
    }
    scale_2.mulScale = mulScale;
    function divScale() {
        var scale = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new (scale_1.ScaleBinding.bind.apply(scale_1.ScaleBinding, [void 0].concat([scale, "float", ["float", "float"]], args)))();
        });
        scale.getAttributes = function () { return []; };
        scale.getExpression = function (attrs, value1, value2) { return SC.div(value1, value2); };
        return scale;
    }
    scale_2.divScale = divScale;
    // Common arithmetics
    function vector2Scale() {
        var scale = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new (scale_1.ScaleBinding.bind.apply(scale_1.ScaleBinding, [void 0].concat([scale, "Vector2", ["float", "float"]], args)))();
        });
        scale.getAttributes = function () { return []; };
        scale.getExpression = function (attrs, value1, value2) { return SC.func("Vector2", "Vector2", value1, value2); };
        return scale;
    }
    scale_2.vector2Scale = vector2Scale;
    function add(value1, value2) {
        return addScale()(value1, value2);
    }
    scale_2.add = add;
    function sub(value1, value2) {
        return subScale()(value1, value2);
    }
    scale_2.sub = sub;
    function mul(value1, value2) {
        return mulScale()(value1, value2);
    }
    scale_2.mul = mul;
    function div(value1, value2) {
        return divScale()(value1, value2);
    }
    scale_2.div = div;
    function interpolate(valueType) {
        if (valueType === void 0) { valueType = "float"; }
        var scale = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new (scale_1.ScaleBinding.bind.apply(scale_1.ScaleBinding, [void 0].concat([scale, valueType, [valueType, valueType]], args)))();
        });
        var t;
        scale.t = function (value) {
            if (value == null)
                return t;
            t = value;
            return scale;
        };
        scale.getAttributes = function () {
            return [
                { name: "t", type: "float", binding: t }
            ];
        };
        scale.getExpression = function (attrs, value1, value2) {
            return SC.mix(value1, value2, attrs["t"]);
        };
        return scale;
    }
    scale_2.interpolate = interpolate;
    function Vector2(value1, value2) {
        return vector2Scale()(value1, value2);
    }
    scale_2.Vector2 = Vector2;
    function custom(expr) {
        var parsed = parser_1.parseExpression(expr);
        var scale = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            // Inference the return type
            var vars = new utils_1.Dictionary();
            attributes.forEach(function (attr, name) {
                vars.set(name, { type: "constant", valueType: attr.type, value: null });
            });
            vars.set("value", { type: "constant", valueType: "float", value: null });
            var e = compiler_1.compileExpression(parsed, vars);
            return new (scale_1.ScaleBinding.bind.apply(scale_1.ScaleBinding, [void 0].concat([scale, e.valueType, ["float"]], args)))();
        });
        var attributes = new utils_1.Dictionary();
        scale.attr = function (name, typeOrValue, value) {
            if (typeOrValue == null && value == null) {
                return attributes.get(name).value;
            }
            else if (typeof (typeOrValue) == "string") {
                attributes.set(name, { type: typeOrValue, value: value });
                return scale;
            }
            else {
                attributes.set(name, { type: "float", value: typeOrValue });
                return scale;
            }
        };
        scale.getAttributes = function () {
            var r = [];
            ;
            attributes.forEach(function (attr, name) {
                r.push({ name: name, type: attr.type, binding: attr.value });
            });
            return r;
        };
        scale.getExpression = function (attrs, value) {
            var vars = new utils_1.Dictionary();
            for (var name_1 in attrs) {
                if (attrs.hasOwnProperty(name_1)) {
                    vars.set(name_1, attrs[name_1]);
                }
            }
            vars.set("value", value);
            return compiler_1.compileExpression(parsed, vars);
        };
        return scale;
    }
    scale_2.custom = custom;
})(scale = exports.scale || (exports.scale = {}));
//# sourceMappingURL=scales.js.map