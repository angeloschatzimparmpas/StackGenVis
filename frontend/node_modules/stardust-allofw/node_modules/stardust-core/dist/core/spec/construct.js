"use strict";
// Construct part of specification.
var intrinsics_1 = require("../intrinsics/intrinsics");
function func(name, returnType) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return {
        type: "function",
        functionName: intrinsics_1.getInternalName({
            name: name,
            argTypes: args.map(function (arg) { return arg.valueType; }),
            returnType: returnType
        }),
        arguments: args,
        valueType: returnType
    };
}
exports.func = func;
function op(name, returnType) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return {
        type: "function",
        functionName: intrinsics_1.getInternalName({
            name: "@" + name,
            argTypes: args.map(function (arg) { return arg.valueType; }),
            returnType: returnType
        }),
        valueType: returnType,
        arguments: args,
    };
}
exports.op = op;
function cast(from, to) {
    return {
        type: "function",
        functionName: intrinsics_1.getInternalName({
            name: "cast:" + from.valueType + ":" + to,
            argTypes: [from.valueType],
            returnType: to
        }),
        valueType: to,
        arguments: [from],
    };
}
exports.cast = cast;
function variable(varName, varType) {
    return {
        type: "variable",
        variableName: varName,
        valueType: varType
    };
}
exports.variable = variable;
function constant(value, valueType) {
    return {
        type: "constant",
        value: value,
        valueType: valueType
    };
}
exports.constant = constant;
function mix(a1, a2, t) {
    return func("mix", a1.valueType, a1, a2, t);
}
exports.mix = mix;
function exp(x) {
    return func("exp", "float", x);
}
exports.exp = exp;
function log(x) {
    return func("log", "float", x);
}
exports.log = log;
function add(a1, a2) {
    return op("+", a1.valueType, a1, a2);
}
exports.add = add;
function sub(a1, a2) {
    return op("-", a1.valueType, a1, a2);
}
exports.sub = sub;
function mul(a1, a2) {
    return op("*", a1.valueType, a1, a2);
}
exports.mul = mul;
function div(a1, a2) {
    return op("/", a1.valueType, a1, a2);
}
exports.div = div;
function equals(a1, a2) {
    return op("==", "bool", a1, a2);
}
exports.equals = equals;
function greaterThan(a1, a2) {
    return op(">", "bool", a1, a2);
}
exports.greaterThan = greaterThan;
function lessThan(a1, a2) {
    return op("<", "bool", a1, a2);
}
exports.lessThan = lessThan;
function greaterThanOrEquals(a1, a2) {
    return op(">=", "bool", a1, a2);
}
exports.greaterThanOrEquals = greaterThanOrEquals;
function lessThanOrEquals(a1, a2) {
    return op("<=", "bool", a1, a2);
}
exports.lessThanOrEquals = lessThanOrEquals;
//# sourceMappingURL=construct.js.map