export declare module Specification {
    type Value = number | number[];
    type ValueType = string;
    interface Input {
        type: ValueType;
        default?: number | number[];
    }
    interface Output {
        type: ValueType;
    }
    type ExpressionType = "constant" | "variable" | "function" | "field";
    interface Expression {
        type: ExpressionType;
        valueType: ValueType;
    }
    interface ExpressionConstant extends Expression {
        type: "constant";
        value: Value;
    }
    interface ExpressionVariable extends Expression {
        type: "variable";
        variableName: string;
    }
    interface ExpressionField extends Expression {
        type: "field";
        fieldName: string;
        value: Expression;
    }
    interface ExpressionFunction extends Expression {
        type: "function";
        functionName: string;
        arguments: Expression[];
    }
    type StatementType = "assign" | "condition" | "for" | "emit";
    interface Statement {
        type: StatementType;
    }
    interface StatementAssign extends Statement {
        type: "assign";
        variableName: string;
        expression: Expression;
    }
    interface StatementEmit extends Statement {
        type: "emit";
        attributes: {
            [name: string]: Expression;
        };
    }
    interface StatementForLoop extends Statement {
        type: "for";
        variableName: string;
        rangeMin: number;
        rangeMax: number;
        statements: Statement[];
    }
    interface StatementCondition extends Statement {
        type: "condition";
        condition: Expression;
        trueStatements: Statement[];
        falseStatements: Statement[];
    }
    interface Mark {
        input: {
            [name: string]: Input;
        };
        output: {
            [name: string]: Output;
        };
        variables: {
            [name: string]: ValueType;
        };
        statements: Statement[];
        repeatBegin?: number;
        repeatEnd?: number;
    }
    interface Shader {
        input: {
            [name: string]: Input;
        };
        output: {
            [name: string]: Output;
        };
        variables: {
            [name: string]: ValueType;
        };
        statements: Statement[];
    }
    interface Marks {
        [name: string]: Mark;
    }
}
export interface Type {
    name: string;
    size: number;
    primitive: string;
    primitiveCount: number;
}
export declare let types: {
    [name: string]: Type;
};
