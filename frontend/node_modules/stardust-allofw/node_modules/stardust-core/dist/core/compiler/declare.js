// Declare mark code with Javascript calls.
"use strict";
var utils_1 = require("../utils/utils");
var compiler_1 = require("./compiler");
var CustomMarkItem = (function () {
    function CustomMarkItem(name) {
        this._name = name;
        this._attrs = new utils_1.Dictionary();
    }
    CustomMarkItem.prototype.attr = function (name, expression) {
        this._attrs.set(name, expression);
        return this;
    };
    CustomMarkItem.prototype.generateCode = function () {
        var attrDefs = [];
        this._attrs.forEach(function (value, key) {
            attrDefs.push(key + " = " + value);
        });
        return this._name + "(" + attrDefs.join(", ") + ")";
    };
    return CustomMarkItem;
}());
exports.CustomMarkItem = CustomMarkItem;
var CustomMark = (function () {
    function CustomMark() {
        this._imports = [];
        this._inputs = [];
        this._variables = [];
        this._items = [];
    }
    CustomMark.prototype.input = function (name, type, initial) {
        this._inputs.push([name, type, initial]);
        return this;
    };
    CustomMark.prototype.variable = function (name, expression) {
        this._variables.push([name, expression]);
        return this;
    };
    CustomMark.prototype.add = function (name) {
        var _a = name.split("."), libraryName = _a[0], markName = _a[1];
        var alreadyImported = false;
        for (var _i = 0, _b = this._imports; _i < _b.length; _i++) {
            var _c = _b[_i], lib = _c[0], mark = _c[1];
            if (lib == libraryName && mark == markName) {
                alreadyImported = true;
            }
        }
        if (!alreadyImported) {
            this._imports.push([libraryName, markName]);
        }
        var item = new CustomMarkItem(markName);
        this._items.push(item);
        return item;
    };
    CustomMark.prototype.generateCode = function (markName) {
        var lines = [];
        for (var _i = 0, _a = this._imports; _i < _a.length; _i++) {
            var _b = _a[_i], library = _b[0], name_1 = _b[1];
            lines.push("import { " + name_1 + " } from " + library + ";");
        }
        // Input attributes:
        var inputDefs = [];
        for (var _c = 0, _d = this._inputs; _c < _d.length; _c++) {
            var _e = _d[_c], name_2 = _e[0], type = _e[1], initial = _e[2];
            if (initial == null) {
                inputDefs.push(name_2 + ": " + type);
            }
            else {
                inputDefs.push(name_2 + ": " + type + " = " + initial);
            }
        }
        lines.push("mark " + markName + "(");
        lines.push("    " + inputDefs.join(", "));
        lines.push(") {");
        // Variables
        for (var _f = 0, _g = this._variables; _f < _g.length; _f++) {
            var _h = _g[_f], name_3 = _h[0], expression = _h[1];
            lines.push("    let " + name_3 + " = " + expression + ";");
        }
        for (var _j = 0, _k = this._items; _j < _k.length; _j++) {
            var item = _k[_j];
            lines.push("    " + item.generateCode() + ";");
        }
        lines.push("}");
        return lines.join("\n");
    };
    CustomMark.prototype.compile = function () {
        var code = this.generateCode("Mark");
        var specs = compiler_1.compileString(code);
        return specs["Mark"];
    };
    return CustomMark;
}());
exports.CustomMark = CustomMark;
//# sourceMappingURL=declare.js.map