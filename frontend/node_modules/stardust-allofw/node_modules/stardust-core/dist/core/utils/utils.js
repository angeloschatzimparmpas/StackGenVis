"use strict";
var Dictionary = (function () {
    function Dictionary() {
        this._dict = {};
    }
    Dictionary.prototype.set = function (key, value) {
        this._dict[key] = value;
    };
    Dictionary.prototype.has = function (key) {
        return this._dict.hasOwnProperty(key);
    };
    Dictionary.prototype.delete = function (key) {
        delete this._dict[key];
    };
    Dictionary.prototype.get = function (key) {
        if (this._dict.hasOwnProperty(key)) {
            return this._dict[key];
        }
        else {
            return undefined;
        }
    };
    Dictionary.prototype.forEach = function (cb) {
        for (var key in this._dict) {
            if (this._dict.hasOwnProperty(key)) {
                cb(this._dict[key], key);
            }
        }
    };
    Dictionary.prototype.clone = function () {
        var result = new Dictionary();
        this.forEach(function (value, key) {
            result.set(key, value);
        });
        return result;
    };
    return Dictionary;
}());
exports.Dictionary = Dictionary;
function shallowClone(object) {
    var result = {};
    for (var key in object) {
        if (object.hasOwnProperty(key)) {
            result[key] = object[key];
        }
    }
    return result;
}
exports.shallowClone = shallowClone;
function attemptName(prefix, check) {
    if (check(prefix))
        return prefix;
    for (var i = 1;; i++) {
        var c = prefix + i.toString();
        if (check(c))
            return c;
    }
}
exports.attemptName = attemptName;
function timeTask(name, cb) {
    var t0 = new Date().getTime();
    cb();
    var t1 = new Date().getTime();
    console.log(name + ": " + ((t1 - t0) / 1000).toFixed(3) + "s");
}
exports.timeTask = timeTask;
//# sourceMappingURL=utils.js.map