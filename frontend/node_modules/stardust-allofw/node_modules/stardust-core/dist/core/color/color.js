"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var math_1 = require("../math/math");
// Stardust use colors with range 0-1 instead of 0-255, different from HTML!
var Color = (function (_super) {
    __extends(Color, _super);
    function Color(r, g, b, a) {
        if (r === void 0) { r = 0; }
        if (g === void 0) { g = 0; }
        if (b === void 0) { b = 0; }
        if (a === void 0) { a = 1; }
        _super.call(this);
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
    Color.prototype.toArray = function () {
        return [this.r, this.g, this.b, this.a];
    };
    Color.prototype.clone = function () {
        return new Color(this.r, this.g, this.b, this.a);
    };
    Color.FromArray = function (_a) {
        var r = _a[0], g = _a[1], b = _a[2], a = _a[3];
        return new Color(r, g, b, a);
    };
    Color.FromHTML = function (html) {
        return Color.FromArray(color.fromHTML(html));
    };
    return Color;
}(math_1.MathType));
exports.Color = Color;
var color;
(function (color) {
    function fromHTML(html, alpha) {
        if (html === void 0) { html = "#000000"; }
        var m;
        m = html.match(/^ *rgb *\( *([0-9\.\-e]+) *, *([0-9\.\-e]+) *, *([0-9\.\-e]+) *\) *$/);
        if (m) {
            return [+m[1] / 255.0, +m[2] / 255.0, +m[3] / 255.0, alpha != null ? alpha : 1];
        }
        m = html.match(/^ *rgba *\( *([0-9\.\-e]+) *, *([0-9\.\-e]+) *, *([0-9\.\-e]+) *, *([0-9\.\-e]+) *\) *$/);
        if (m) {
            return [+m[1] / 255.0, +m[2] / 255.0, +m[3] / 255.0, alpha != null ? alpha * +m[4] : +m[4]];
        }
        m = html.match(/^ *\#([0-9a-fA-F]{3}) *$/);
        if (m) {
            var r = parseInt(m[1][0], 16) * 17;
            var g = parseInt(m[1][1], 16) * 17;
            var b = parseInt(m[1][2], 16) * 17;
            return [r / 255.0, g / 255.0, b / 255.0, alpha != null ? alpha : 1];
        }
        m = html.match(/^ *\#([0-9a-fA-F]{6}) *$/);
        if (m) {
            var r = parseInt(m[1].slice(0, 2), 16);
            var g = parseInt(m[1].slice(2, 4), 16);
            var b = parseInt(m[1].slice(4, 6), 16);
            return [r / 255.0, g / 255.0, b / 255.0, alpha != null ? alpha : 1];
        }
        return [0, 0, 0, 1];
    }
    color.fromHTML = fromHTML;
})(color = exports.color || (exports.color = {}));
//# sourceMappingURL=color.js.map